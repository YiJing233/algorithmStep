// 343. 整数拆分

// 给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

// 示例 1:

// 输入: 2
// 输出: 1
// 解释: 2 = 1 + 1, 1 × 1 = 1。

// 示例 2:

// 输入: 10
// 输出: 36
// 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。

// 说明: 你可以假设 n 不小于 2 且不大于 58。


class Solution {
    public int integerBreak(int n) {
        if(n <= 3) return n - 1;
        int a = n / 3, b = n % 3;
        if(b == 0) return (int)Math.pow(3, a);
        if(b == 1) return (int)Math.pow(3, a - 1) * 4;
        return (int)Math.pow(3, a) * 2;
    }
}

// 第一个能做到的肯定是打表XD
// 其实是个数学题，用贪心思想反复地拆之后，可以发现3^n 增速远大于 2^n
// 所以要尽可能多拆出3来，%3 = 0 直接输出3^n 
//                      = 1 就减少一个3 乘4会更大 
//                      =2就直接乘2
